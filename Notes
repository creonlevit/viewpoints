should this look at annualized returns, or scale returns by dt

should plot rank insted of value?

should we plot (manhattan) distance between parameter values?

what should we eliminate durin preprocessing:

	 1) guys who are <=0 profit at t=0.1
	 2) what else?


Color by value at t3.
animate slider
smart renorm (preserving origin, like global norm)
X t2 = t1 + dt <= tf

X must redraw whenever buttons or sliders change

Direct selection of nets.

Add "selection only" display
display profit history (parallel coords)

add new kind of window subclass for showing selected net leraning parameter scatterplot
-----
Jacques says:

   class c2 is subclass of c1
   class c1 has method c1::ma()
   c2 does not have its own ma()

   c1 and c2 each have their own separate methods mb()

   c1::ma() calls mb()

   i1 = new c1
   i2 = new c2

   i1.ma() will call c1::ma() which will call mb() which is c1::mb()
   i2.ma() will call c1::ma() which will call mb() which is c2::mb()

Well, that works, but only if mb is declared virtual in c1.
-----
Install fltk 1.1.5
Keyboard access to slider values
control panel per window (or control panel settings per window)
t1, t2, displacement?  
---

rgb color exponent slider
Precompliled headers for blitz and fltk (and gmm++)
    tried it - only saves a a couple of seconds on compile			 
link gmm++ to blas and lapack
ratios of densities
matrix invariants, or other anisotropy measures
eigenvectors?
least squares grad and hessian
relative coords.
natural neighbors densities
control panels consolodated into one, with one tab per plot
fix normalization, etc.  For pairs, xforms, etc.
	normalization (scaling of data) seperate from display offset, except perhaps for 3sigma
	e.g. do not shift data zero - just scale data, have separate option for display -1:1 or 0:1
add sixsigma?
histograms for marginals
make skelaton for other programs, e.g. ktest
multiple selections
separate colors for selected, unselected, blendcolor
panel buttons to duplicate keys to reset xform, invert selection, deselect, etc..
trackball 3d manip
binned kernel densities
nD trackball
running entropy / MI estimates
run entropy code
principal componenents
independent components
---
use texture (1-d?) coord instead of color to render color of points.  Generate texture based on selection region, thus avoiding testing all points to see if they are in the region.  Question: how to handle individual colors ramps and alphas on a per-plot basis:  Answer, use a separate texture for each plot, but use the same texture coords.  Use vertex (and texture) arrays to speed rendering.
---

denb_16, vs lam2_16, rank, x+y v x-y
select rhs vs lhs

10:00:09 05 May 05

Fast selection idea.  Use mouse x and mouse y to create a new
texture (or texture matrix) that is effetively a blue rectangle
(corners based on mouse coords) inside a red square.  Use each point's
x,y coords in active window (where selection is being made) as that
points texture coords in ALL windows.  This can generalized to create
textures (coresponding to soft selections) based on arbirary functions
of coordinates and other (e.g. slider) variables.  E.g. a texture coord
can represent energy, or distance from some n-d point, or how many
times a region has been brushed by an airbrush, etc....

18:57:25 06 Sep 05

Functionality to add (see also project plan):

***tuning
- remember normalization & ranking
  - don't repeatedly rerank and/or renormalize the same var
  - fast reranking after "delete selected points"?
- don't require multiple copies of vertices
  - interleaved vs. not
- histogram speedups

***misc
- tile windows correctly for multiple screens
- dynamically couple to running sims on another machine(!)
- comments in files ("#")
- mapped files?

***global controls to non-tabbed panel
- npoints DONE
- start, end, stride for npoints
- random points (repsecting start & end)
- reset all views
- clear selection DONE
- complement selection DONE
- dont display deselected DONE
- add to selection BUGGY
- subtract from selection
- brush selection
- move selection
- new selection (as opposed to brush or move, works for add & subtract)
- delete selected points DONE
- write data to file DONE !
- global versions of local controls (size, nbins, etc)
- show count (and %) of selected/visible/total points

***per-view controls, in tab
- reset view
- selection color (or should this be on global panel?)
- better axis labels
  - labels smaller
  - labels display axis transformations (x+y, polar, normalizations, ranking...)
- tickmarks on axes (per axis?)
- polar grids?
- logarithmic axes
  - via normalzation option
  - show in labels
- atanh (logistic) normalization
- histogram enhancements
  - speed them up when changing bin counts
    - should be very fast for equi-depth case, when data is sorted: O(nbins).
  - histogram bin counts independent for x and y
  - default bin counts using Kevin Knuth's algorithm
  - equi-depth option
  - extend KK's algorithm for equi-depth case
  - offsets for histogram
  - better coloring for histograms 
    - better alphs, or edges on lines
    - colored same as selection color
  - selection via histograms
- boxplots
- density estimates
  - binned kdes?
  - point sprites (same thing?)
- multiple axes
  - ND rotation
- time series
- vector variables
- rework normalization
  - separate scaling, centering, windowing
  - separate axes and windowing ?

***plot window enhancements
- min, max, mean, median, variance, stddev, quartiles, etc, (like R.summary())
  - for each axis
  - for each selection on each axis
  - for each histogram bin on each axis
- boxplots
- multiple selections
- selection color chooser (global & local)
- fix relationship between color, depth, seletion visibility
  - for 2D, alpha=0, selected points should never be obscured
  - separate 3rd axis=NONE to force 2D
    - then we can use z to make selected points draw on top of non-selected points
- tie plot window keys to control panel keys (shortcuts?), where possible
- trackballs for 3d rotation
- scale w.r.t. mouse down as center
- move point to center ?
  - show center glyph, like flashearth
- lock aspect ratio to 1:1
  - even when window aspect ratio is not 1:1
- fancy texture hacking, as above


***additional kinds of vis
- parallel coordinates
- vectors
- glyphs
- color by scalar
- MDS
- laplacian eigenmaps, LLE, other dim. reduction....
- classification (SOM....)
.....

Priorities (?)

histogram rescale slders
data scales
resizable windows (fix)
rotation of axis
